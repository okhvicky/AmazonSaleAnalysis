# %% [markdown]
# # Amazon Sales Analysis

# %%
import pandas as pd 
import numpy as np 
import seaborn as sns 

# %% [markdown]
# Loading Data

# %%
df = pd.read_csv('Amazon Sale Report.csv')
print(df.head())
print(df.columns)
# Inspecting the first few rows and column names

# %% [markdown]
# # Data Exploration

# %%
df.head()

# %%
df.info()

# %%
df.describe()

# %% [markdown]
# # Data Cleaning
# - Convert Date to datetime: Necessary for sales trends.
# - Handle Missing Data: Columns like fulfilled-by, PendingS, and possibly postal codes.
# - Categorical columns: Like Status, Fulfilment, Category are cleaned.

# %%
# Converting Date to datetime, allowing pandas to infer the format
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Check if any date values were converted to NaT (i.e., failed conversions)
print(df['Date'].isna().sum())  # To check how many invalid dates were found

# %%
df = df.dropna(subset=['Date'])
# Drop rows where the date conversion failed (NaT)

# %%
# Converting Date to datetime format
df['Date'] = pd.to_datetime(df['Date'], format='%m-%d-%y')

# %%
# Drop rows with missing values in critical columns (like Amount, Status)
df = df.dropna(subset=['Amount', 'Status'])

# %%
# Fill NaNs in non-critical columns with a placeholder or mode
df['fulfilled-by'].fillna('Unknown', inplace=True)
df['PendingS'].fillna('Not Pending', inplace=True)

# %% [markdown]
# # Sales Overview
# - We can quickly get an overview of sales trends over time using the Amount and Date columns.

# %%
# Group sales by month for trend analysis
df['Month'] = df['Date'].dt.to_period('M')

# Calculate total sales per month
monthly_sales = df.groupby('Month')['Amount'].sum()

# Quick visualization
monthly_sales.plot(kind='line', title='Sales Trend Over Time')


# %% [markdown]
# # Product Analysis
# - Analyze the distribution of product categories, sizes, and quantities.

# %%
# Group by Category and Size to see which products are selling the most
product_sales = df.groupby(['Category', 'Size'])['Amount'].sum()

# Sort to find top-selling categories and sizes
top_products = product_sales.sort_values(ascending=False).head(10)

# Bar plot for product category sales
top_products.plot(kind='bar', title='Top 10 Products by Sales')


# %% [markdown]
# # Fulfillment Method Analysis
# - This analysis focuses on the effectiveness of fulfillment methods.

# %%
# Group by Fulfilment and Status to check effectiveness
fulfillment_status = df.groupby(['Fulfilment', 'Status'])['Order ID'].count().unstack()

# Visualize fulfillment status
fulfillment_status.plot(kind='bar', stacked=True, title='Fulfilment Methods by Order Status')

# %% [markdown]
# # Geographical Analysis
# - Explore geographical sales distribution by ship-state and ship-city.

# %%
# Group by state and calculate total sales
geo_sales_state = df.groupby('ship-state')['Amount'].sum().sort_values(ascending=False)

# Group by city and calculate total sales
geo_sales_city = df.groupby('ship-city')['Amount'].sum().sort_values(ascending=False)

# Plot sales distribution by state
geo_sales_state.plot(kind='bar', title='Sales by State')


# %%
# Save plots to files for presentation
monthly_sales.plot(kind='line', title='Sales Trend Over Time').figure.savefig('sales_trend.png')
top_products.plot(kind='bar', title='Top 10 Products by Sales').figure.savefig('top_products.png')
fulfillment_status.plot(kind='bar', stacked=True, title='Fulfilment Methods by Order Status').figure.savefig('fulfillment.png')
geo_sales_state.plot(kind='bar', title='Sales by State').figure.savefig('sales_by_state.png')


# %% [markdown]
# # Thankyou! Team InnoByte for the opportunity. 

# %% [markdown]
# - I am still learning. Somewhere in the graph, I ran out of ideas on how to shorten names and display them better. I would be happy if you revert its solution. 


